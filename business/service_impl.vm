#if( $entity.hasCompositePrimaryKey() )
#set( $entityKeyType = ${entity.name} + "EntityKey" )
#else
#set( $entityKeyType = ${entity.keyAttributes[0].formatedType(0)} )
#end
##--------------------------------------------------------------------------------------------------------
/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
package ${target.javaPackageFromFolder(${SRC})};

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import ${ENTITY_PKG}.${entity.name};
import ${ENTITY_PKG}.jpa.${entity.name}Entity;
#if( $entity.hasCompositePrimaryKey() )
import ${ENTITY_PKG}.jpa.${entity.name}EntityKey;
#end
#foreach( $import in $java.imports($entity) )
import $import;
#end
import ${ROOT_PKG}.business.service.${entity.name}Service;
import ${ROOT_PKG}.business.service.mapping.${entity.name}ServiceMapper;
import ${ROOT_PKG}.data.repository.jpa.${entity.name}JpaRepository;
import org.springframework.stereotype.Component;

/**
 * Implementation of ${entity.name}Service
 */
@Component
public class ${entity.name}ServiceImpl implements ${entity.name}Service {

	@Resource
	private ${entity.name}JpaRepository ${entity.name.toLowerCase()}JpaRepository;

	@Resource
	private ${entity.name}ServiceMapper ${entity.name.toLowerCase()}ServiceMapper;
	
	@Override
	public ${entity.name} findById(${fn.argumentsListWithType($entity.keyAttributes)}) {
#if( $entity.hasCompositePrimaryKey() )
		${entityKeyType} id = new ${entityKeyType}(${fn.argumentsList($entity.keyAttributes)});
		${entity.name}Entity ${entity.name.toLowerCase()}Entity = ${entity.name.toLowerCase()}JpaRepository.findOne(id);
#else
		${entity.name}Entity ${entity.name.toLowerCase()}Entity = ${entity.name.toLowerCase()}JpaRepository.findOne(${fn.argumentsList($entity.keyAttributes)});
#end
		return ${entity.name.toLowerCase()}ServiceMapper.map${entity.name}EntityTo${entity.name}(${entity.name.toLowerCase()}Entity);
	}

	@Override
	public List<${entity.name}> findAll() {
		Iterable<${entity.name}Entity> entities = ${entity.name.toLowerCase()}JpaRepository.findAll();
		List<${entity.name}> beans = new ArrayList<${entity.name}>();
		for(${entity.name}Entity ${entity.name.toLowerCase()}Entity : entities) {
			beans.add(${entity.name.toLowerCase()}ServiceMapper.map${entity.name}EntityTo${entity.name}(${entity.name.toLowerCase()}Entity));
		}
		return beans;
	}

	@Override
	public ${entity.name} save(${entity.name} ${entity.name.toLowerCase()}) {
		return update(${entity.name.toLowerCase()}) ;
	}

	@Override
	public ${entity.name} create(${entity.name} ${entity.name.toLowerCase()}) {
#if( $entity.hasCompositePrimaryKey() )
		${entityKeyType} id = new ${entityKeyType}(${fn.argumentsListWithGetter($entity.name.toLowerCase(),$entity.keyAttributes)});
		${entity.name}Entity ${entity.name.toLowerCase()}Entity = ${entity.name.toLowerCase()}JpaRepository.findOne(id);
#else
		${entity.name}Entity ${entity.name.toLowerCase()}Entity = ${entity.name.toLowerCase()}JpaRepository.findOne(${fn.argumentsListWithGetter($entity.name.toLowerCase(),$entity.keyAttributes)});
#end
		if( ${entity.name.toLowerCase()}Entity != null ) {
			throw new IllegalStateException("already.exists");
		}
		${entity.name.toLowerCase()}Entity = new ${entity.name}Entity();
		${entity.name.toLowerCase()}ServiceMapper.map${entity.name}To${entity.name}Entity(${entity.name.toLowerCase()}, ${entity.name.toLowerCase()}Entity);
		${entity.name}Entity ${entity.name.toLowerCase()}EntitySaved = ${entity.name.toLowerCase()}JpaRepository.save(${entity.name.toLowerCase()}Entity);
		return ${entity.name.toLowerCase()}ServiceMapper.map${entity.name}EntityTo${entity.name}(${entity.name.toLowerCase()}EntitySaved);
	}

	@Override
	public ${entity.name} update(${entity.name} ${entity.name.toLowerCase()}) {
#if( $entity.hasCompositePrimaryKey() )
		${entityKeyType} id = new ${entityKeyType}(${fn.argumentsListWithGetter($entity.name.toLowerCase(),$entity.keyAttributes)});
		${entity.name}Entity ${entity.name.toLowerCase()}Entity = ${entity.name.toLowerCase()}JpaRepository.findOne(id);
#else
		${entity.name}Entity ${entity.name.toLowerCase()}Entity = ${entity.name.toLowerCase()}JpaRepository.findOne(${fn.argumentsListWithGetter($entity.name.toLowerCase(),$entity.keyAttributes)});
#end
		${entity.name.toLowerCase()}ServiceMapper.map${entity.name}To${entity.name}Entity(${entity.name.toLowerCase()}, ${entity.name.toLowerCase()}Entity);
		${entity.name}Entity ${entity.name.toLowerCase()}EntitySaved = ${entity.name.toLowerCase()}JpaRepository.save(${entity.name.toLowerCase()}Entity);
		return ${entity.name.toLowerCase()}ServiceMapper.map${entity.name}EntityTo${entity.name}(${entity.name.toLowerCase()}EntitySaved);
	}

	@Override
	public void delete(${fn.argumentsListWithType($entity.keyAttributes)}) {
#if( $entity.hasCompositePrimaryKey() )
		${entityKeyType} id = new ${entityKeyType}(${fn.argumentsList($entity.keyAttributes)});
		${entity.name.toLowerCase()}JpaRepository.delete(id);
#else
		${entity.name.toLowerCase()}JpaRepository.delete(${fn.argumentsList($entity.keyAttributes)});
#end
	}

	public ${entity.name}JpaRepository get${entity.name}JpaRepository() {
		return ${entity.name.toLowerCase()}JpaRepository;
	}

	public void set${entity.name}JpaRepository(${entity.name}JpaRepository ${entity.name.toLowerCase()}JpaRepository) {
		this.${entity.name.toLowerCase()}JpaRepository = ${entity.name.toLowerCase()}JpaRepository;
	}

	public ${entity.name}ServiceMapper get${entity.name}ServiceMapper() {
		return ${entity.name.toLowerCase()}ServiceMapper;
	}

	public void set${entity.name}ServiceMapper(${entity.name}ServiceMapper ${entity.name.toLowerCase()}ServiceMapper) {
		this.${entity.name.toLowerCase()}ServiceMapper = ${entity.name.toLowerCase()}ServiceMapper;
	}

}
